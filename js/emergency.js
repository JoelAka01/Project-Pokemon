// Syst√®me d'alerte d'urgence pour les probl√®mes de localStorage
(function () {
   // Fonction pour cr√©er un bouton d'urgence
   function createEmergencyButton() {
      const emergencyBtn = document.createElement('button');
      emergencyBtn.innerHTML = 'üÜò R√©parer le jeu';
      emergencyBtn.className = 'fixed top-4 right-4 bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-full shadow-lg transition-all duration-300 z-50 animate-pulse';
      emergencyBtn.style.display = 'none';

      emergencyBtn.onclick = function () {
         if (confirm('Cela va nettoyer compl√®tement les donn√©es du jeu et recharger la page. Continuer?')) {
            // Nettoyer compl√®tement
            try {
               localStorage.clear();
               sessionStorage.clear();

               // Marquer pour nettoyage d'urgence
               localStorage.setItem('pokemonTCG_emergency', 'true');

               alert('Nettoyage effectu√©! La page va se recharger.');
               window.location.reload();
            } catch (error) {
               alert('Erreur lors du nettoyage. Essayez de vider manuellement le cache de votre navigateur (Ctrl+Shift+Delete).');
            }
         }
      };

      document.body.appendChild(emergencyBtn);
      return emergencyBtn;
   }

   // Fonction pour d√©tecter les probl√®mes
   function detectProblems() {
      // Attendre que la page soit charg√©e
      setTimeout(() => {
         const handContainer = document.getElementById('hand');
         const deckContainer = document.getElementById('deck');

         if (!handContainer || !deckContainer) {
            console.warn('Conteneurs DOM non trouv√©s');
            return;
         }

         // V√©rifier si les cartes sont affich√©es apr√®s le chargement
         setTimeout(() => {
            const handCards = handContainer.querySelectorAll('img').length;
            const deckCards = deckContainer.querySelectorAll('img').length;

            console.log(`Cartes d√©tect√©es - Main: ${handCards}, Deck: ${deckCards}`);

            // Si aucune carte n'est affich√©e apr√®s 10 secondes, montrer le bouton d'urgence
            if (handCards === 0 && deckCards === 0) {
               console.error('üö® PROBL√àME D√âTECT√â: Aucune carte affich√©e');

               const emergencyBtn = document.querySelector('button[innerHTML*="R√©parer"]') || createEmergencyButton();
               emergencyBtn.style.display = 'block';

               // Afficher un message d'alerte
               const alertDiv = document.createElement('div');
               alertDiv.className = 'fixed top-20 right-4 bg-red-600/90 text-white p-4 rounded-lg shadow-lg z-40 max-w-sm';
               alertDiv.innerHTML = `
                        <div class="flex items-center mb-2">
                            <span class="text-xl mr-2">‚ö†Ô∏è</span>
                            <strong>Probl√®me d√©tect√©</strong>
                        </div>
                        <p class="text-sm mb-3">Les cartes ne s'affichent pas correctement. Cliquez sur "R√©parer le jeu" pour r√©soudre le probl√®me.</p>
                        <button onclick="this.parentElement.remove()" class="bg-white text-red-600 px-2 py-1 rounded text-xs font-bold">
                            Fermer
                        </button>
                    `;

               document.body.appendChild(alertDiv);

               // Auto-suppression apr√®s 15 secondes
               setTimeout(() => {
                  if (alertDiv.parentNode) {
                     alertDiv.remove();
                  }
               }, 15000);
            }
         }, 10000); // Attendre 10 secondes apr√®s le chargement

      }, 2000); // Attendre 2 secondes pour que la page se charge
   }

   // D√©marrer la d√©tection quand le DOM est pr√™t
   if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', detectProblems);
   } else {
      detectProblems();
   }

   // Cr√©er imm√©diatement le bouton (cach√©) pour les cas d'urgence
   createEmergencyButton();
})();
