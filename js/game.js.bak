import { Player } from './player.js';
import { CardModal } from './ui/cardModal.js';

export class Game {
   constructor(playerDeck, opponentDeck, maxHandSize = 5) {
      this.player = new Player(playerDeck, maxHandSize);
      this.opponent = new Player(opponentDeck, maxHandSize);
      this.playerActive = document.getElementById("player-active");
      this.opponentActive = document.getElementById("opponent-active");
      this.results = document.getElementById("results");
      this.deckContainer = document.getElementById("deck");
      this.handContainer = document.getElementById("hand");
      this.opponentDeckContainer = document.getElementById("opponent-deck");
      this.opponentHandContainer = document.getElementById("opponent-hand");
      this.cardModal = new CardModal();
      this.maxHandSize = maxHandSize;
      this.drawCooldown = 5 * 60; // 5 minutes en secondes
      this.timeLeft = 0;
      this.drawTimerElement = document.getElementById("draw-timer");
      this.canDraw = true;  // Indique si on peut tirer une carte
      this.drawTimerId = null;

   }



   updateTimerDisplay() {
      const minutes = Math.floor(this.timeLeft / 60).toString().padStart(2, '0');
      const seconds = (this.timeLeft % 60).toString().padStart(2, '0');
      this.drawTimerElement.textContent = `Prochain tirage dans : ${minutes}:${seconds}`;
   }

   // Nouvelle m√©thode √† ajouter dans ta classe Game :
   attemptDrawCard() {
      if (!this.canDraw) {
         alert("Attends que le timer expire pour tirer une nouvelle carte !");
         return null;
      }

      if (this.player.hand.cards.length >= this.maxHandSize) {
         alert("Ta main est pleine !");
         return null;
      }

      if (this.player.deck.length === 0) {
         alert("Ta pioche est vide !");
         return null;
      }

      // Autoriser le tirage
      this.canDraw = false;
      const card = this.player.deck.shift();
      this.player.hand.cards.push(card);

      // D√©marrer le timer de 5 minutes (300000 ms)
      this.startDrawTimer();

      return card;
   }

   startDrawTimer() {
      const timerDisplay = document.getElementById("timer-display");
      let remainingTime = 300; // secondes

      // Affiche le timer d√®s le d√©but
      if (timerDisplay) {
         timerDisplay.textContent = `Prochaine carte dans: 5:00`;
      }

      // Nettoie un √©ventuel timer pr√©c√©dent
      if (this.drawTimerId) {
         clearInterval(this.drawTimerId);
      }

      this.drawTimerId = setInterval(() => {
         remainingTime--;

         if (timerDisplay) {
            const minutes = Math.floor(remainingTime / 60);
            const seconds = remainingTime % 60;
            timerDisplay.textContent = `Prochaine carte dans: ${minutes}:${seconds.toString().padStart(2, '0')}`;
         }

         if (remainingTime <= 0) {
            clearInterval(this.drawTimerId);
            this.canDraw = true;
            if (timerDisplay) {
               timerDisplay.textContent = "Tu peux tirer une carte !";
            }
         }
      }, 1000);
   }
   // M√©thode setupModal supprim√©e et d√©plac√©e dans CardModal
   // M√©thode formatCost supprim√©e et d√©plac√©e dans CardModal   // M√©thode showCardModal remplac√©e par l'utilisation de la classe CardModal
   showCardModal(card) {
      this.cardModal.showCardModal(card);
   }
     // Les m√©thodes suivantes ont √©t√© d√©plac√©es dans la classe CardModal :
   // - createTypeBadge
   // - createAttackElement
   // - createWeaknessElement
   // - createResistanceElement
   // - getTypeIcon
   // - getTypeGradient
   
   renderDeck(container, deck, dragHandler = null) {
      // Nettoyer le conteneur de mani√®re s√©curis√©e
      while (container.firstChild) {
         container.removeChild(container.firstChild);
      }

      // Wrapper pour le deck pour un meilleur positionnement
      const deckWrapper = document.createElement("div");
      deckWrapper.className = "relative mb-8 mt-2"; // Ajout d'une marge en bas pour l'indicateur

      // Cr√©er l'image du dos de la carte
      const cardBack = document.createElement("img");
      cardBack.src = "img/back-card.jpg"; // Correction du chemin relatif
      cardBack.alt = "Dos de carte Pok√©mon";
      cardBack.className = "w-40 h-auto rounded-lg shadow-xl cursor-pointer transition-all duration-300 hover:scale-110 hover:-translate-y-2 pokemon-card";
      cardBack.id = "deck-card";
      cardBack.setAttribute("draggable", "true");

      // Ajouter le gestionnaire d'√©v√©nements drag si fourni
      if (dragHandler) {
         cardBack.addEventListener("dragstart", dragHandler);
      }

      deckWrapper.appendChild(cardBack);

      // Ajouter un indicateur visuel du nombre de cartes plus visible
      const counter = document.createElement("div");
      counter.className = "mt-2 flex items-center justify-center";

      const cardIcon = document.createElement("div");
      cardIcon.className = "mr-1 text-xl";
      cardIcon.innerHTML = "üÉè"; // Ic√¥ne carte
      counter.appendChild(cardIcon);

      const label = document.createElement("p");
      label.textContent = `${deck.length} carte${deck.length > 1 ? 's' : ''}`;
      label.className = "text-white font-bold text-lg bg-gradient-to-r from-blue-600 to-purple-600 rounded-full px-3 py-1 shadow-md";
      counter.appendChild(label);

      // Ajouter √©galement un badge sur la carte pour une indication rapide
      const quickBadge = document.createElement("div");
      quickBadge.className = "absolute -top-3 -right-3 w-10 h-10 rounded-full bg-red-600 border-2 border-white shadow-lg flex items-center justify-center text-lg font-bold text-white";
      quickBadge.textContent = deck.length.toString();
      deckWrapper.appendChild(quickBadge);

      // Ajouter le wrapper et le compteur au conteneur
      container.appendChild(deckWrapper);
      container.appendChild(counter);
   }
   renderPlayerCards() {
      // Rendre le deck
      this.renderDeck(this.deckContainer, this.player.deck, (ev) => this.dragstart_handler(ev));

      // Nettoyer le conteneur de la main de mani√®re s√©curis√©e
      while (this.handContainer.firstChild) {
         this.handContainer.removeChild(this.handContainer.firstChild);
      }

      // Rendre chaque carte dans la main du joueur
      this.player.hand.cards.forEach((cardObj, index) => {
         // Cr√©er un wrapper pour la carte
         const cardWrapper = document.createElement("div");
         cardWrapper.className = "card-container relative";

         // Cr√©er l'√©l√©ment image de la carte
         const card = document.createElement("img");
         card.src = cardObj.imageUrl;
         card.alt = cardObj.name || "Carte Pok√©mon";
         card.id = `hand-card-${index}`;
         card.className = "w-40 h-auto rounded-lg shadow cursor-pointer pokemon-card transition-all duration-300";

         // Ajouter les √©v√©nements
         card.addEventListener("click", () => this.showCardModal(cardObj));
         card.setAttribute("draggable", "true");
         card.addEventListener("dragstart", (ev) => {
            ev.dataTransfer.setData("text/plain", `hand-card-${index}`);
            // Ajouter une classe pour indiquer que la carte est en cours de glisser
            card.classList.add("dragging");
         });         // Ajouter un √©v√©nement pour retirer la classe quand le drag se termine
         card.addEventListener("dragend", () => {
            card.classList.remove("dragging");
         });
         
         // Ajouter un badge pour les types de carte si disponibles         if (cardObj.types && cardObj.types.length > 0) {
            const typeIndicator = document.createElement("span");
            const primaryType = cardObj.types[0];
            typeIndicator.className = `absolute -top-2 -right-2 w-8 h-8 rounded-full type-${primaryType} border-2 border-white shadow-lg flex items-center justify-center text-xs text-white font-bold`;

            // Utiliser nos nouvelles ic√¥nes (depuis CardModal)
            typeIndicator.innerHTML = this.cardModal.getTypeIcon(primaryType);

            // Ajouter une animation au badge
            typeIndicator.style.animation = "pulse-light 2s infinite";
            cardWrapper.appendChild(typeIndicator);

            // Ajouter une info-bulle au survol avec tous les types
            card.setAttribute("title", `Type: ${cardObj.types.join(", ")}`);
         }

         // Ajouter la carte au wrapper et le wrapper au conteneur
         cardWrapper.appendChild(card);
         this.handContainer.appendChild(cardWrapper);
      });
   }
   
   // Note: La m√©thode getTypeColor a √©t√© remplac√©e par getTypeGradient et getTypeIcon
   renderOpponentCards() {
      // Rendre le deck de l'adversaire
      this.renderDeck(this.opponentDeckContainer, this.opponent.deck);

      // Nettoyer le conteneur de la main de l'adversaire de mani√®re s√©curis√©e
      while (this.opponentHandContainer.firstChild) {
         this.opponentHandContainer.removeChild(this.opponentHandContainer.firstChild);
      }

      // Utilise la longueur r√©elle de la main de l'adversaire
      const opponentHandSize = this.opponent.hand.cards.length;

      for (let i = 0; i < opponentHandSize; i++) {
         // Cr√©er un wrapper pour chaque carte
         const cardWrapper = document.createElement("div");
         cardWrapper.className = "card-container relative";

         // Cr√©er l'√©l√©ment image de la carte
         const card = document.createElement("img");
         card.src = "img/back-card.jpg"; // Correction du chemin relatif
         card.alt = "Dos de carte Pok√©mon";
         card.className = "w-40 h-auto rounded-lg shadow pokemon-card transition-all duration-300";
         card.id = `opponent-hand-card-${i}`;

         // Ajouter un effet de brillance ou un badge num√©rot√©
         const cardNumber = document.createElement("span");
         cardNumber.className = "absolute top-1 left-1 w-5 h-5 rounded-full bg-blue-700 border border-white shadow-sm flex items-center justify-center text-xs text-white font-bold";
         cardNumber.textContent = (i + 1).toString();

         // Ajouter la carte et le badge au wrapper
         cardWrapper.appendChild(card);
         cardWrapper.appendChild(cardNumber);

         // Ajouter le wrapper au conteneur
         this.opponentHandContainer.appendChild(cardWrapper);
      }
   } renderActiveCard(container, card) {
      // Nettoyer le conteneur de mani√®re s√©curis√©e
      while (container.firstChild) {
         container.removeChild(container.firstChild);
      }

      if (!card) {
         // Cr√©er un placeholder attractif
         const placeholderWrapper = document.createElement("div");
         placeholderWrapper.className = "flex flex-col items-center justify-center h-full w-full bg-gradient-to-r from-gray-700/20 to-gray-900/20 rounded-lg border-2 border-dashed border-yellow-500 animate-pulse";

         // Ajouter une ic√¥ne
         const placeholderIcon = document.createElement("div");
         placeholderIcon.className = "mb-2 text-4xl text-yellow-500";
         placeholderIcon.innerHTML = "‚¨áÔ∏è"; // Emoji fl√®che vers le bas
         placeholderWrapper.appendChild(placeholderIcon);

         // Ajouter le texte
         const placeholder = document.createElement("p");
         placeholder.textContent = "D√©posez une carte ici";
         placeholder.className = "text-center text-yellow-400 font-bold";
         placeholderWrapper.appendChild(placeholder);

         container.appendChild(placeholderWrapper);
         return;
      }

      // Cr√©er un wrapper pour la carte active avec un halo d'√©nergie
      const activeCardWrapper = document.createElement("div");
      activeCardWrapper.className = "relative";      // Ajouter un effet de halo autour de la carte active
      const halo = document.createElement("div");
      const primaryType = card.types && card.types.length > 0 ? card.types[0] : "Colorless";
      const typeGradient = this.cardModal.getTypeGradient(primaryType).replace("bg-gradient-to-r", "bg-gradient-to-r opacity-70");
      halo.className = `absolute -inset-2 ${typeGradient} rounded-lg blur-md`;
      activeCardWrapper.appendChild(halo);

      // Cr√©er l'image de la carte
      const cardImg = document.createElement("img");
      cardImg.src = card.imageUrl;
      cardImg.alt = card.name;
      cardImg.className = "relative w-full h-auto rounded-lg shadow-xl pokemon-card transition-all duration-300";
      cardImg.addEventListener("click", () => this.showCardModal(card));

      // Ajouter un indicateur HP bien visible
      const hpIndicator = document.createElement("div");
      const hpValue = parseInt(card.hp) || 0;
      hpIndicator.className = "absolute -bottom-4 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-red-600 to-red-800 text-white px-4 py-1 rounded-full border-2 border-white shadow-lg font-bold";
      hpIndicator.textContent = `${hpValue} HP`;

      // Ajouter une indication visuelle que c'est la carte active
      const activeIndicator = document.createElement("div");
      activeIndicator.className = "absolute -bottom-2 -right-2 w-8 h-8 bg-green-500 rounded-full border-2 border-white flex items-center justify-center shadow-lg";
      activeIndicator.innerHTML = "‚úì"; // Coche pour indiquer actif      // Ajouter un badge pour les types si disponibles      if (card.types && card.types.length > 0) {
         const typeIndicator = document.createElement("div");
         const primaryType = card.types[0];
         typeIndicator.className = `absolute -top-2 -right-2 w-8 h-8 rounded-full type-${primaryType} border-2 border-white shadow-lg flex items-center justify-center text-xs text-white font-bold`;
         typeIndicator.innerHTML = this.cardModal.getTypeIcon(primaryType);

         // Tooltip pour le type
         typeIndicator.setAttribute("title", `Type: ${primaryType}`);
         activeCardWrapper.appendChild(typeIndicator);

         // Si plusieurs types, afficher un deuxi√®me badge
         if (card.types.length > 1) {
            const secondTypeIndicator = document.createElement("div");
            const secondaryType = card.types[1];
            secondTypeIndicator.className = `absolute -top-2 -left-2 w-8 h-8 rounded-full type-${secondaryType} border-2 border-white shadow-lg flex items-center justify-center text-xs text-white font-bold`;
            secondTypeIndicator.innerHTML = this.cardModal.getTypeIcon(secondaryType);
            secondTypeIndicator.setAttribute("title", `Type secondaire: ${secondaryType}`);
            activeCardWrapper.appendChild(secondTypeIndicator);
         }
      }

      // Assembler les √©l√©ments
      activeCardWrapper.appendChild(cardImg);
      activeCardWrapper.appendChild(hpIndicator);
      activeCardWrapper.appendChild(activeIndicator);

      // Ajouter un nom de carte visible
      const nameTag = document.createElement("div");
      nameTag.className = "absolute -top-4 left-1/2 transform -translate-x-1/2 bg-blue-800 text-white px-2 py-0.5 rounded text-xs font-bold truncate max-w-[90%] shadow-md";
      nameTag.textContent = card.name;
      activeCardWrapper.appendChild(nameTag);

      container.appendChild(activeCardWrapper);

      // Mettre √† jour le texte HP sous la carte active
      const hpDisplay = container.id === "player-active" ?
         document.getElementById("player-hp") :
         document.getElementById("opponent-hp");

      if (hpDisplay) {
         hpDisplay.textContent = `${hpValue} / ${hpValue} HP`;
      }
   }





   dragstart_handler(ev) {
      // L‚Äô√©l√©ment draggu√© est le dos de la pioche
      ev.dataTransfer.setData("text/plain", "deck-card");
      ev.dataTransfer.effectAllowed = "move";
   }



   dragover_handler(ev) {
      ev.preventDefault();  // n√©cessaire pour autoriser le drop
      ev.dataTransfer.dropEffect = "move";
   }


   drop_handler(ev) {
      ev.preventDefault();
      const data = ev.dataTransfer.getData("text/plain");
      const targetId = ev.currentTarget.id;
      console.log("Drop event:", { data, targetId }); // Debug

      if (data === "deck-card") {
         const card = this.attemptDrawCard();
         if (card) {
            this.renderCards();
         }
      } else if (data.startsWith("hand-card-")) {
         const index = parseInt(data.split("-")[2]);
         console.log("Card index:", index); // Debug

         if (index < 0 || index >= this.player.hand.cards.length) {
            console.error("Index de carte invalide:", index);
            return;
         }

         const card = this.player.hand.cards[index];
         if (!card) {
            console.error("Carte non trouv√©e √† l'index:", index);
            return;
         }

         if (targetId === "player-active") {
            if (!this.player.activeCard) {
               console.log("D√©placement de la carte vers la zone active"); // Debug
               this.player.activeCard = this.player.hand.cards.splice(index, 1)[0];
               this.renderActiveCard(this.playerActive, this.player.activeCard);

               // L'adversaire joue automatiquement une carte
               if (!this.opponent.activeCard && this.opponent.hand.cards.length > 0) {
                  const randomIndex = Math.floor(Math.random() * this.opponent.hand.cards.length);
                  this.opponent.activeCard = this.opponent.hand.cards.splice(randomIndex, 1)[0];
                  this.renderActiveCard(this.opponentActive, this.opponent.activeCard);
                  this.renderOpponentCards();
               }

               this.renderCards();
               if (this.opponent.activeCard) {
                  this.displayResults();
               }
            } else {
               alert("Tu as d√©j√† un Pok√©mon actif !");
            }
         } else if (targetId === "opponent-active") {
            if (!this.opponent.activeCard) {
               this.opponent.activeCard = this.player.hand.cards.splice(index, 1)[0];
               this.renderActiveCard(this.opponentActive, this.opponent.activeCard);
               this.renderCards();
               if (this.player.activeCard) {
                  this.displayResults();
               }
            } else {
               alert("L'adversaire a d√©j√† un Pok√©mon actif !");
            }
         }
      }
   } displayResults() {
      const playerCard = this.player.activeCard;
      const opponentCard = this.opponent.activeCard;

      if (!playerCard || !opponentCard) {
         console.log("Une ou deux cartes actives sont manquantes.");
         return;
      }

      // Nettoyer le conteneur des r√©sultats
      while (this.results.firstChild) {
         this.results.removeChild(this.results.firstChild);
      }

      // Cr√©er un conteneur de r√©sultats
      const resultsContainer = document.createElement("div");
      resultsContainer.className = "p-3 rounded-lg bg-white/30 backdrop-blur-sm shadow-lg";

      // Calculer les d√©g√¢ts et les points de vie restants
      const playerAttack = playerCard.attacks && playerCard.attacks.length > 0 ? playerCard.attacks[0] : { name: "Attaque", damage: "10" };
      const opponentAttack = opponentCard.attacks && opponentCard.attacks.length > 0 ? opponentCard.attacks[0] : { name: "Attaque", damage: "10" };

      const playerDamage = parseInt(playerAttack.damage) || 0;
      const opponentDamage = parseInt(opponentAttack.damage) || 0;

      const playerCurrentHp = Math.max(0, parseInt(playerCard.hp) - opponentDamage);
      const opponentCurrentHp = Math.max(0, parseInt(opponentCard.hp) - playerDamage);

      // Cr√©er les √©l√©ments visuels pour le r√©sum√© des d√©g√¢ts du joueur
      const playerResult = document.createElement("div");
      playerResult.className = "mb-3 border-b pb-2";

      const playerTitle = document.createElement("h4");
      playerTitle.className = "font-bold text-green-800";
      playerTitle.textContent = "Ton attaque";
      playerResult.appendChild(playerTitle);

      const playerAttackInfo = document.createElement("div");
      playerAttackInfo.className = "flex items-center justify-between";

      const attackName = document.createElement("span");
      attackName.className = "text-blue-700 font-medium";
      attackName.textContent = `${playerAttack.name || "Attaque"}`;

      const damageInfo = document.createElement("span");
      damageInfo.className = "bg-red-600 text-white px-2 py-1 rounded text-xs";
      damageInfo.textContent = `${playerDamage} d√©g√¢ts`;

      playerAttackInfo.appendChild(attackName);
      playerAttackInfo.appendChild(damageInfo);
      playerResult.appendChild(playerAttackInfo);

      const opponentHpInfo = document.createElement("div");
      opponentHpInfo.className = "mt-1";
      opponentHpInfo.innerHTML = `<span class="font-medium">${opponentCard.name}</span> a <span class="font-bold ${opponentCurrentHp <= 20 ? 'text-red-600' : ''}">${opponentCurrentHp}/${opponentCard.hp} HP</span> restants`;
      playerResult.appendChild(opponentHpInfo);

      // Ajouter au conteneur des r√©sultats
      resultsContainer.appendChild(playerResult);

      // Cr√©er les √©l√©ments visuels pour le r√©sum√© des d√©g√¢ts de l'adversaire
      const opponentResult = document.createElement("div");

      const opponentTitle = document.createElement("h4");
      opponentTitle.className = "font-bold text-blue-800";
      opponentTitle.textContent = "Attaque adverse";
      opponentResult.appendChild(opponentTitle);

      const opponentAttackInfo = document.createElement("div");
      opponentAttackInfo.className = "flex items-center justify-between";

      const oppAttackName = document.createElement("span");
      oppAttackName.className = "text-blue-700 font-medium";
      oppAttackName.textContent = `${opponentAttack.name || "Attaque"}`;

      const oppDamageInfo = document.createElement("span");
      oppDamageInfo.className = "bg-red-600 text-white px-2 py-1 rounded text-xs";
      oppDamageInfo.textContent = `${opponentDamage} d√©g√¢ts`;

      opponentAttackInfo.appendChild(oppAttackName);
      opponentAttackInfo.appendChild(oppDamageInfo);
      opponentResult.appendChild(opponentAttackInfo);

      const playerHpInfo = document.createElement("div");
      playerHpInfo.className = "mt-1";
      playerHpInfo.innerHTML = `<span class="font-medium">${playerCard.name}</span> a <span class="font-bold ${playerCurrentHp <= 20 ? 'text-red-600' : ''}">${playerCurrentHp}/${playerCard.hp} HP</span> restants`;
      opponentResult.appendChild(playerHpInfo);

      // Ajouter au conteneur des r√©sultats
      resultsContainer.appendChild(opponentResult);

      // Ajouter un message de victoire/d√©faite si n√©cessaire
      if (playerCurrentHp <= 0 || opponentCurrentHp <= 0) {
         const battleResult = document.createElement("div");
         battleResult.className = "mt-3 pt-2 border-t text-center";

         if (opponentCurrentHp <= 0 && playerCurrentHp > 0) {
            battleResult.innerHTML = `<span class="font-bold text-green-600 text-lg">üéâ Tu as gagn√© ! üéâ</span>`;
         } else if (playerCurrentHp <= 0 && opponentCurrentHp > 0) {
            battleResult.innerHTML = `<span class="font-bold text-red-600 text-lg">‚ùå Tu as perdu ! ‚ùå</span>`;
         } else if (playerCurrentHp <= 0 && opponentCurrentHp <= 0) {
            battleResult.innerHTML = `<span class="font-bold text-purple-600 text-lg">ü§ù Match nul ! ü§ù</span>`;
         }

         resultsContainer.appendChild(battleResult);
      }

      // Ajouter le conteneur au DOM
      this.results.appendChild(resultsContainer);
   }

   drawInitialCards(player, count = 5) {
      for (let i = 0; i < count; i++) {
         player.drawCard();  // drawCard() ajoute d√©j√† la carte dans la main
      }
   }



   renderCards() {
      this.renderPlayerCards();
      this.renderOpponentCards();
   }


   addDropListeners(...elements) {
      elements.forEach(el => {
         el.addEventListener("dragover", (ev) => this.dragover_handler(ev));
         el.addEventListener("drop", (ev) => this.drop_handler(ev));
      });
   }


   startGame() {
      this.startDrawTimer();
      [this.player, this.opponent].forEach(player => this.drawInitialCards(player));
      this.addDropListeners(this.playerActive, this.opponentActive, this.handContainer);
      this.renderCards();
   }

}